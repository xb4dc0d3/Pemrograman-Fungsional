
===================================
(Introduction)
===================================
# Solve Me First FP
solveMeFirst a b = a + b

main = do
    val1 <- readLn
    val2 <- readLn
    let sum = solveMeFirst val1 val2
    print sum

# List Replication
f :: Int -> [Int] -> [Int]
f n arr = concatMap (replicate n) arr

-- This part handles the Input and Output and can be used as it is. Do not modify this part.
main :: IO ()
main = getContents >>=
       mapM_ print. (\(n:arr) -> f n arr). map read. words

# Filter Array
f :: Int -> [Int] -> [Int]
f n arr = filter(\x-> x<=n) arr--Fill up this function

-- The Input/Output section. You do not need to change or modify this part
main = do 
    n <- readLn :: IO Int 
    inputdata <- getContents 
    let 
        numbers = map read (lines inputdata) :: [Int] 
    putStrLn . unlines $ (map show . f n) numbers

# Filter Positions in List
f :: [Int] -> [Int]
f lst = map (lst!!) [1, 3..(length lst)]

-- This part deals with the Input and Output and can be used as it is. Do not modify it.
main = do
	inputdata <- getContents
	mapM_ (putStrLn. show). f. map read. lines $ inputdata

# Array of N Elements
fn n = [1..n]

main = do
n <- readLn :: IO Int
print (fn(n))

# Reverse A List
rev l = foldr (\x xs -> xs ++ [x]) [] l

# Sum of Odd Elements
f arr = sum (filter (odd) arr)

-- This part handles the Input/Output and can be used as it is. Do not change or modify it.
main = do
	inputdata <- getContents
	putStrLn $ show $ f $ map (read :: String -> Int) $ lines inputdata

# List Length
len :: [a] -> Int
len lst = sum(map (\_ -> 1) lst)


# Perimeter Polygon
distance :: [Float] -> Float
distance [x1,y1,x2,y2] = sqrt $ (x2 - x1)^2 + (y2 - y1)^2
distance _ = 0

perimeter' :: [Float] -> Float -> Float
perimeter' [] acc = acc
perimeter' points acc = perimeter' (drop 2 points) (acc + (distance (take 4 points)))

perimeter :: [Float] -> Float
perimeter points = perimeter' (points ++ (take 2 points)) 0

main :: IO ()
main = do
    _ <- getLine
    val <- getContents
    let f = map (read::String->Float) $ words val
    print (perimeter f)
